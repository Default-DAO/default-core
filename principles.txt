Design Principles

1. Keep logic tight. Don't cut corners. Keep state where it should exist. 
2. Keep code functionality modular. Contracts should be small and state changes basic.

... Implement pure function design standards? No side effects, everything is coded functional style?
--> Are there contract size limitations to this style of coding?


Contract Architecture Convention/Style Guidelines:

-----

100% Checks - Effects - Interactions design pattern

checks  = business logic validations
effects = persistent state changes internal to the contract
interactions = external contract calls

-----

- parameter variables have trailing underscores: paramArg_
- interval state variables have leading underscores: _privateState

This is just to have some comptability with OpenZeppelin conventions

-----

Smart contracts are distributed systems using message passing, but through the VM.
It's an event-driven system, you can't think object oriented. Each transaction is an event
composed of multiple messages being passed in a certain order (contract call flow).

This is why it's always good to call external contracts last â€” you want to do all your state changes first
before you leave the system.

-----

State SHOULD be immutable. There should be a very atomic, functional-style programming applied to smart contracts.
SO many bugs/hacks come from shit people are doing with state that they shouldn't. So much admin managed state,
side effects, and similar things causing security issues. 

-----

Upgrades/Proxies:

The way that people are thinking about Proxies are so whack. There should be a single Proxy
contract serving as an api gateway and everything else is just a read/query layer than can be redirected by the gateway.
People trying to forward calls via delegate call through the state contract are insane.
Diamond standard as a standard makes sense but the naming/branding around it is just ridiculous.

Use a CQRS style contract architecture (separate reads/writes). Idk what I'm talking about.

----

TODO:
- Recreate contracts with correct state + new file organization system.


IDEA:
- on launch of contracts, start at epoch 1. Fresh start. New DAO from beginning. Reset issuance.
- give all contributors/depositors tokens earned in the form of sDNT.
- let depositors decide: deposit in contract to earn sDNT, or walk away from the table full refund no questions asked + earned sDNT.
- set higher withdraw fee -> 20%? create locking mechanism for multipliers? 6mo, 12mo, 18mo?

